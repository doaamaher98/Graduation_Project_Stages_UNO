/*********************************************************************/
/* FLEX SENSOR READINGS FROM DOAA'S HAND */
/*********************************************************************/
#include <avr/io.h>

#include "Adafruit_MPU6050.h"
#include "Adafruit_Sensor.h"
#include <SPI.h>
#include <Wire.h>
//#include "Adafruit_GFX.h"
//#include "Adafruit_SSD1306.h"

Adafruit_MPU6050 mpu;

/************************ OLED ****************************/
//#define screen_width  128
//#define screen_height 64

//#define OLED_RESET     4 // Reset pin # (or -1 if sharing Arduino reset pin)
//Adafruit_SSD1306 display(screen_width,screen_height);

//static const unsigned char PROGMEM epd_bitmap_NORMAL2 []  = {
//  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x00, 0x06, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x00, 0x0f, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x00, 0x0f, 0x00, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x00, 0x1f, 0x00, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x00, 0x3f, 0x01, 0xbf, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x00, 0x7f, 0x03, 0x7e, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x00, 0xfe, 0x06, 0xbc, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x00, 0xfe, 0x0f, 0x78, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x01, 0xfe, 0x1f, 0xf1, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x03, 0xfc, 0x3f, 0xe7, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x03, 0xfc, 0x7f, 0xcf, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x07, 0xf9, 0xff, 0x9e, 0xf8, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x0f, 0xf3, 0xff, 0xbd, 0x71, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x0f, 0xf7, 0xff, 0x7f, 0xe3, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x1f, 0xff, 0xfe, 0xfe, 0xcf, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x1f, 0xff, 0xff, 0xff, 0x9f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x3f, 0xfc, 0x7f, 0xfe, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x3f, 0xf0, 0x7f, 0xfc, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x3f, 0xf0, 0x7f, 0xf9, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x3f, 0xe0, 0xff, 0xf7, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x3f, 0xe0, 0xff, 0xff, 0xf6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x3f, 0xe1, 0x8f, 0xff, 0xfd, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x3f, 0xff, 0x0f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x3f, 0xfe, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x3f, 0xfc, 0x0f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x3f, 0xfc, 0x19, 0xff, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x7f, 0xfc, 0x61, 0xff, 0xf7, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x7f, 0xff, 0xc1, 0xff, 0xef, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0xff, 0xff, 0xc1, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x01, 0xff, 0xff, 0x83, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x01, 0xff, 0xff, 0x87, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0xff, 0xff, 0xfc, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x0e, 0x7f, 0xff, 0xf0, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x1f, 0x9f, 0xff, 0xf0, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x3f, 0xc7, 0xff, 0xe0, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x7f, 0xf3, 0xff, 0xe1, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0xff, 0xf8, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0xff, 0xfe, 0x7f, 0xff, 0x01, 0x80, 0x18, 0x7f, 0xc7, 0xfe, 0x3f, 0xc2, 0x03, 0xfe, 0x18, 0x06, 
//  0xff, 0xff, 0x3f, 0xfc, 0x01, 0x80, 0x18, 0x7f, 0xc7, 0xfc, 0x70, 0x82, 0x07, 0x8e, 0x1c, 0x06, 
//  0xff, 0xff, 0x9f, 0xf0, 0x01, 0x80, 0x18, 0x60, 0x06, 0x00, 0x60, 0x02, 0x06, 0x00, 0x1c, 0x06, 
//  0xff, 0xff, 0xcf, 0xe0, 0x01, 0x80, 0x18, 0x60, 0x06, 0x00, 0x60, 0x02, 0x0c, 0x00, 0x1e, 0x06, 
//  0xff, 0xff, 0xef, 0x80, 0x01, 0x80, 0x18, 0x60, 0x06, 0x00, 0x60, 0x02, 0x0c, 0x00, 0x13, 0x06, 
//  0xff, 0xff, 0xef, 0x00, 0x01, 0x80, 0x18, 0x60, 0x06, 0x00, 0x60, 0x02, 0x18, 0x00, 0x13, 0x86, 
//  0xff, 0xff, 0xec, 0x00, 0x01, 0x80, 0x18, 0x60, 0x06, 0x00, 0x78, 0x02, 0x18, 0x00, 0x11, 0x86, 
//  0xff, 0xff, 0xe0, 0x00, 0x01, 0x80, 0x18, 0x7f, 0x87, 0xf8, 0x1e, 0x02, 0x18, 0x00, 0x10, 0xc6, 
//  0xff, 0xff, 0xe0, 0x00, 0x01, 0x80, 0x18, 0x7f, 0x87, 0xf8, 0x0f, 0x82, 0x18, 0x06, 0x10, 0x66, 
//  0x7f, 0xff, 0xc0, 0x00, 0x01, 0x80, 0x18, 0x60, 0x06, 0x00, 0x01, 0xc2, 0x18, 0x06, 0x10, 0x66, 
//  0x7f, 0xff, 0x00, 0x00, 0x01, 0x80, 0x18, 0x60, 0x06, 0x00, 0x00, 0xc2, 0x18, 0x06, 0x10, 0x36, 
//  0x3f, 0xfe, 0x00, 0x00, 0x01, 0x80, 0x18, 0x60, 0x06, 0x00, 0x00, 0xc2, 0x1c, 0x06, 0x10, 0x3e, 
//  0x3f, 0xfc, 0x00, 0x00, 0x01, 0x80, 0x18, 0x60, 0x06, 0x00, 0x00, 0xc2, 0x0c, 0x06, 0x10, 0x1e, 
//  0x1f, 0xf8, 0x00, 0x00, 0x01, 0x80, 0x18, 0x60, 0x06, 0x00, 0x00, 0xc2, 0x0e, 0x06, 0x10, 0x0e, 
//  0x1f, 0xf0, 0x00, 0x00, 0x01, 0xff, 0x18, 0x60, 0x07, 0xfc, 0x41, 0xc2, 0x07, 0x06, 0x10, 0x0e, 
//  0x1f, 0xe0, 0x00, 0x00, 0x01, 0xff, 0x18, 0x60, 0x07, 0xfe, 0x7f, 0x82, 0x03, 0xfe, 0x10, 0x06, 
//  0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0xf8, 0x00, 0x00, 
//  0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
//};
/************************************************************/

/******************* MUX CONTROL PINS ***********************/
#define S0 3                             /* Assign Multiplexer pin S0 connect to pin D3 */
#define S1 4                             /* Assign Multiplexer pin S1 connect to pin D4 */
#define S2 5                             /* Assign Multiplexer pin S2 connect to pin D5 */
#define S3 6                             /* Assign Multiplexer pin S3 connect to pin D6 */
#define SIG A0                            /* Assign SIG pin as Analog output for all 16 channels of Multiplexer to pin A0 */
/************************************************************/
/***************************************************************/


// Change these constants according to your project's design
const int VCC = 5;            // voltage at Ardunio 5V line
const float R_DIV = 10000.0;  // resistor used to create a voltage divider

/* Flex (1) : THUMB */
const float flatResistance1 = 28500.0;  // resistance when flat
const float bendResistance1 = 57500.0;  // resistance at 90 deg
//int flex1Pin = A0;
/*********************************************************************/
/* Flex (2) : Index */
const float flatResistance2 = 13000.0;  // resistance when flat
const float bendResistance2 = 24000.0;  // resistance at 90 deg
//int flex2Pin = A1;
/*********************************************************************/
/* Flex (3) : Middle */
const float flatResistance3 = 18000.0;  // resistance when flat
const float bendResistance3 = 47000.0;  // resistance at 90 deg
//int flex3Pin = A2;
/*********************************************************************/
/* Flex (4) : Ring */
const float flatResistance4 = 13000.0;  // resistance when flat
const float bendResistance4 = 34000.0;  // resistance at 90 deg
//int flex4Pin = A3;
/*********************************************************************/
/* Flex (5) : Pinky */
const float flatResistance5 = 30000.0;   // resistance when flat
const float bendResistance5 = 80000.0;  // resistance at 90 deg
//int flex5Pin = A4 ;

/***********************************************/
/***********************************************/



void setup() {
  Serial.begin(19200);

//  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);


  /****************** MUX ******************/
    pinMode(S0,OUTPUT);                       /* Define digital signal pin as output to the Multiplexer pin SO */        
    pinMode(S1,OUTPUT);                       /* Define digital signal pin as output to the Multiplexer pin S1 */  
    pinMode(S2,OUTPUT);                       /* Define digital signal pin as output to the Multiplexer pin S2 */ 
    pinMode(S3,OUTPUT);                       /* Define digital signal pin as output to the Multiplexer pin S3 */
      
    pinMode(SIG, INPUT);                      /* Define analog signal pin as input or receiver from the Multiplexer pin SIG */  
  /******************************************/

  /***************** GYRO ********************/
  while (!Serial)
    delay(10); // will pause Zero, Leonardo, etc until serial console opens

  Serial.println("Adafruit MPU6050 test!");

  // Try to initialize!
  if (!mpu.begin()) {
    Serial.println("Failed to find MPU6050 chip");
    while (1) {
      delay(10);
    }
  }
  Serial.println("MPU6050 Found!");
/*****************************************************/
  mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
  
  switch (mpu.getAccelerometerRange()) {
  case MPU6050_RANGE_2_G:
    Serial.println("+-2G");
    break;
  case MPU6050_RANGE_4_G:
    Serial.println("+-4G");
    break;
  case MPU6050_RANGE_8_G:
    Serial.println("+-8G");
    break;
  case MPU6050_RANGE_16_G:
    Serial.println("+-16G");
    break;
  }
  /*****************************************************/
  mpu.setGyroRange(MPU6050_RANGE_500_DEG);
  switch (mpu.getGyroRange()) {
  case MPU6050_RANGE_250_DEG:
    Serial.println("+- 250 deg/s");
    break;
  case MPU6050_RANGE_500_DEG:
    Serial.println("+- 500 deg/s");
    break;
  case MPU6050_RANGE_1000_DEG:
    Serial.println("+- 1000 deg/s");
    break;
  case MPU6050_RANGE_2000_DEG:
    Serial.println("+- 2000 deg/s");
    break;
  }
/******************************************************/
  mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);
  switch (mpu.getFilterBandwidth()) {
  case MPU6050_BAND_260_HZ:
    Serial.println("260 Hz");
    break;
  case MPU6050_BAND_184_HZ:
    Serial.println("184 Hz");
    break;
  case MPU6050_BAND_94_HZ:
    Serial.println("94 Hz");
    break;
  case MPU6050_BAND_44_HZ:
    Serial.println("44 Hz");
    break;
  case MPU6050_BAND_21_HZ:
    Serial.println("21 Hz");
    break;
  case MPU6050_BAND_10_HZ:
    Serial.println("10 Hz");
    break;
  case MPU6050_BAND_5_HZ:
    Serial.println("5 Hz");
    break;
  }
/*********************************************************/
  Serial.println("");
  delay(100);
/***************************************************/
/***************************************************/

//  pinMode(flex1Pin, INPUT);
//  pinMode(flex2Pin, INPUT);
//  pinMode(flex3Pin, INPUT);
//  pinMode(flex4Pin, INPUT);
//  pinMode(flex5Pin, INPUT);
}

/*********************************************************************/
/*********************************************************************/

void loop() {
  /******************* OLED *******************************************************************/
//  display.clearDisplay();
//  display.drawBitmap(1, 2, epd_bitmap_NORMAL2, 128,64, 1);
//  display.display();
/********************************************************************************************/

  /******************** MUX **********************/
    // Channel 0 (C0 pin - binary output 0,0,0,0)
    digitalWrite(S0,LOW); digitalWrite(S1,LOW); digitalWrite(S2,LOW); digitalWrite(S3,LOW);
    
    int ADCflex1 = analogRead(SIG);
    float Vflex1 = ADCflex1 * VCC / 1023.0;
    float Rflex1 = R_DIV * (VCC / Vflex1 - 1.0);

    float angle1 = map(Rflex1, flatResistance1, bendResistance1, 0, 90.0);
    //Serial.println("Thumb: " + String(angle1));

/********************************************************************************/
    // Channel 1 (C1 pin - binary output 1,0,0,0)
    digitalWrite(S0,HIGH); digitalWrite(S1,LOW); digitalWrite(S2,LOW); digitalWrite(S3,LOW);

    int ADCflex2 = analogRead(SIG);
    float Vflex2 = ADCflex2 * VCC / 1023.0;
    float Rflex2 = R_DIV * (VCC / Vflex2 - 1.0);

    float angle2 = map(Rflex2, flatResistance2, bendResistance2, 0, 90.0);
   // Serial.println("Fore: "+String(angle2));
    
/*********************************************************************************/
    // Channel 2 (C2 pin - binary output 0,1,0,0)
    digitalWrite(S0,LOW); digitalWrite(S1,HIGH); digitalWrite(S2,LOW); digitalWrite(S3,LOW);
    
    int ADCflex3 = analogRead(SIG);
    float Vflex3 = ADCflex3 * VCC / 1023.0;
    float Rflex3 = R_DIV * (VCC / Vflex3 - 1.0);

    float angle3 = map(Rflex3, flatResistance3, bendResistance3, 0, 90.0);
   // Serial.println("Middle: "+String(angle3));
    
/****************************************************************************************/
    // Channel 3 (C3 pin - binary output 1,1,0,0)
    digitalWrite(S0,HIGH); digitalWrite(S1,HIGH); digitalWrite(S2,LOW); digitalWrite(S3,LOW);

    int ADCflex4 = analogRead(SIG);
    float Vflex4 = ADCflex4 * VCC / 1023.0;
    float Rflex4 = R_DIV * (VCC / Vflex4 - 1.0);

    float angle4 = map(Rflex4, flatResistance4, bendResistance4, 0, 90.0);
    //Serial.println("Ring: "+String(angle4));

/*********************************************************************************************/  
    // Channel 4 (C4 pin - binary output 0,0,1,0)
    digitalWrite(S0,LOW); digitalWrite(S1,LOW); digitalWrite(S2,HIGH); digitalWrite(S3,LOW);

    int ADCflex5 = analogRead(SIG);
    float Vflex5 = ADCflex5 * VCC / 1023.0;
    float Rflex5 = R_DIV * (VCC / Vflex5 - 1.0);

    float angle5 = map(Rflex5, flatResistance5, bendResistance5, 0, 90.0);
    //Serial.println("Pinky: "+String(angle5));
/**********************************************************************************************/
/**********************************************************************************************/
Serial.println();
/*********************************************************************************************/


  /* Get new sensor events with the readings */
  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);

 Serial.println("{'Thumb': " +String(angle1)+", " + "'Fore': " +String(angle2)+", " + "'Middle': " +String(angle3)+", " + 
 "'Ring': " +String(angle4)+", "  + "'Pinky': " +String(angle5)+", "+ "'AccX': " + String(a.acceleration.x) +", " + "'AccY': " + String(a.acceleration.y) +", "
 "'AccZ': " + String(a.acceleration.z) + "," +"\n"+ "'RotationX': " + String(g.gyro.x) +", " + "'RotationY': " + String(g.gyro.y) +", " + "'RotationZ': " + String(g.gyro.z) +"}");



  /******************************************************/
  /****** Sending floats through Bluetooth Module ******/
  /*****************************************************/

  /* Array of floats */
 /* float arr_data[5] = {angle1,angle2,angle3,angle4,angle5}; */


  /* Looping through Array */
 /* Serial.print(String(arr_data[0]) + "," + String(arr_data[1]) + ","+ String(arr_data[2]) + 
  "," +String(arr_data[3]) + "," +String(arr_data[4]) ); */

  /* New Line */
 Serial.println();
  
  /*********************************************************************/
  /*********** Sending data with a delay of 1 sec **********************/
  /*********************************************************************/
  delay(200);
}
/////////////////////////////////////
