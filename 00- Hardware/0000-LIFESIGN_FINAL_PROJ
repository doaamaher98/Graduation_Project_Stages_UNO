/*********************************************************************/
/*                         lIFESIGN                                  */
/*********************************************************************/
#include <avr/io.h>

#include "Adafruit_MPU6050.h"
#include "Adafruit_Sensor.h"
#include <Wire.h>

#include "Adafruit_GFX.h"
#include "Adafruit_SSD1306.h"
#include <SoftwareSerial.h>

SoftwareSerial MySerial (4, 5); // TX -> 4 AND RX -> RX on UNO

/********************************************************/
Adafruit_MPU6050 mpu;

/****************** OLED*********************************/
#define SCREEN_WIDTH  128
#define SCREEN_HEIGHT 64
#define OLED_RESET    4

#define MUX_Address 0x70 // TCA9548A Encoders address
Adafruit_SSD1306 display(OLED_RESET);
/*********************************************************************/

// Change these constants according to your project's design
const int VCC = 5;            // voltage at Ardunio 5V line
const float R_DIV = 10000.0;  // resistor used to create a voltage divider

/****************************************************/
/* For battery level calculation  */
#define cellPin A7

const float mvc = 4.68; // VCC OF NANO

float counts = 0;
float mv = 0;
/****************************************************/

/* Flex (1) : THUMB */
const float flatResistance1 = 15000.0;  // resistance when flat
const float bendResistance1 = 70500.0;  // resistance at 90 deg
int flex1Pin = A0;
/*********************************************************************/
/* Flex (2) : Index */
const float flatResistance2 = 11500.0;  // resistance when flat
const float bendResistance2 = 46000.0;  // resistance at 90 deg
int flex2Pin = A1;
/*********************************************************************/
/* Flex (3) : Middle */
const float flatResistance3 = 13500.0;  // resistance when flat
const float bendResistance3 = 53500.0;  // resistance at 90 deg
int flex3Pin = A2;
/*********************************************************************/
/* Flex (4) : Ring */
const float flatResistance4 = 18500.0;  // resistance when flat
const float bendResistance4 = 44000.0;  // resistance at 90 deg
int flex4Pin = A3;
/*********************************************************************/
/* Flex (5) : Pinky */
const float flatResistance5 = 18500.0;   // resistance when flat
const float bendResistance5 = 85000.0;   // resistance at 90 deg
int flex5Pin = A6 ;
/***********************************************/

/*************** I2C MUX **************************/
void TCA9548A (u8 bus)
{
  Wire.beginTransmission(MUX_Address); // MUX Address
  Wire.write(1 << bus); // SHIFTING CHANNEL
  Wire.endTransmission();
}
/**********************************************************************************/

void setup() {
  Serial.begin(9600); // CHANGE THE BLUETOOTH MODULE BAUD RATE TO CHANGE THIS LINE
  Wire.begin();

  /******************************************/
  pinMode(flex1Pin, INPUT);
  pinMode(flex2Pin, INPUT);
  pinMode(flex3Pin, INPUT);
  pinMode(flex4Pin, INPUT);
  pinMode(flex5Pin, INPUT);
  /******************************************/

  TCA9548A(1); // CHANNEL (0)
  // Clear the buffer
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  //  delay(10);

  /************************ LOGO ***************************/
  static const unsigned char PROGMEM logo []  = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x38, 0xf1, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0xe7, 0x80, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x79, 0xef, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0xde, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xff, 0xbd, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xfb, 0xc0, 0x00, 0x00, 0x00, 0x00,
    0x01, 0xf3, 0xf7, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe3, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0xe5, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf9, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00,
    0x01, 0xf8, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x03, 0xfc, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0f, 0xfe, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x7f, 0xff, 0x81, 0x09, 0xef, 0xbc, 0x9f, 0x42, 0x7f, 0xde, 0x01, 0x09, 0x08, 0x20, 0x90, 0x62,
    0x3f, 0xfc, 0x01, 0x09, 0x08, 0x20, 0xa0, 0x52, 0x3f, 0xf0, 0x01, 0x09, 0xef, 0x38, 0xa0, 0x52,
    0x1f, 0xe0, 0x01, 0x09, 0x0c, 0x0c, 0xa1, 0x4a, 0x1f, 0xc0, 0x01, 0x09, 0x08, 0x04, 0xa1, 0x46,
    0x0f, 0x80, 0x01, 0x09, 0x08, 0x04, 0x91, 0x46, 0x0f, 0x00, 0x01, 0xe9, 0x07, 0xbc, 0x9f, 0x42,
    0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };
  display.clearDisplay();
  display.drawBitmap(30, 1, logo, 64, 32, 1);
  display.display();
  delay(1000);
  /***************************************************************/

  /***************** GYROSCOPE ***********************************/

  while (!Serial)
    delay(10); // will pause Zero, Leonardo, etc until serial console opens

  TCA9548A(0); // CHANNEL (0)
  //Serial.println("Adafruit MPU6050 test!");

  // Try to initialize!
  if (!mpu.begin()) {
    Serial.println("Failed to find MPU6050 chip");
    while (1) {
      //      delay(10);
    }
  }
  // Serial.println("MPU6050 Found!");
  /*****************************************************/
  mpu.setAccelerometerRange(MPU6050_RANGE_8_G);

  switch (mpu.getAccelerometerRange()) {
    case MPU6050_RANGE_2_G:
      //   Serial.println("+-2G");
      break;
    case MPU6050_RANGE_4_G:
      //   Serial.println("+-4G");
      break;
    case MPU6050_RANGE_8_G:
      //   Serial.println("+-8G");
      break;
    case MPU6050_RANGE_16_G:
      //   Serial.println("+-16G");
      break;
  }
  /*****************************************************/
  mpu.setGyroRange(MPU6050_RANGE_500_DEG);
  switch (mpu.getGyroRange()) {
    case MPU6050_RANGE_250_DEG:
      //   Serial.println("+- 250 deg/s");
      break;
    case MPU6050_RANGE_500_DEG:
      //   Serial.println("+- 500 deg/s");
      break;
    case MPU6050_RANGE_1000_DEG:
      //   Serial.println("+- 1000 deg/s");
      break;
    case MPU6050_RANGE_2000_DEG:
      //  Serial.println("+- 2000 deg/s");
      break;
  }
  /******************************************************/
  mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);
  switch (mpu.getFilterBandwidth()) {
    case MPU6050_BAND_260_HZ:
      //   Serial.println("260 Hz");
      break;
    case MPU6050_BAND_184_HZ:
      //   Serial.println("184 Hz");
      break;
    case MPU6050_BAND_94_HZ:
      //    Serial.println("94 Hz");
      break;
    case MPU6050_BAND_44_HZ:
      //   Serial.println("44 Hz");
      break;
    case MPU6050_BAND_21_HZ:
      //  Serial.println("21 Hz");
      break;
    case MPU6050_BAND_10_HZ:
      //   Serial.println("10 Hz");
      break;
    case MPU6050_BAND_5_HZ:
      //   Serial.println("5 Hz");
      break;
  }
  /*********************************************************/
  //  Serial.println("");
  //  delay(10);
  /*********************************************************/
}

/*********************************************************************/
/*********************************************************************/

void loop() {
  /***************************************************/
  // Read the ADC from THUMB, and calculate voltage and resistance from it
  int ADCflex1 = analogRead(flex1Pin);
  float Vflex1 = ADCflex1 * VCC / 1023.0;
  float Rflex1 = R_DIV * (VCC / Vflex1 - 1.0);
  // Serial.println("Resistance 1: " + String(Rflex1) + " ohms");
  /*********************************************************************/

  // Read the ADC from INDEX, and calculate voltage and resistance from it
  int ADCflex2 = analogRead(flex2Pin);
  float Vflex2 = ADCflex2 * VCC / 1023.0;
  float Rflex2 = R_DIV * (VCC / Vflex2 - 1.0);
  // Serial.println("Resistance 2: " + String(Rflex2) + " ohms");
  /*********************************************************************/

  // Read the ADC from MIDDLE, and calculate voltage and resistance from it
  int ADCflex3 = analogRead(flex3Pin);
  float Vflex3 = ADCflex3 * VCC / 1023.0;
  float Rflex3 = R_DIV * (VCC / Vflex3 - 1.0);
  // Serial.println("Resistance 3: " + String(Rflex3) + " ohms");
  /*********************************************************************/

  // Read the ADC from RING, and calculate voltage and resistance from it
  int ADCflex4 = analogRead(flex4Pin);
  float Vflex4 = ADCflex4 * VCC / 1023.0;
  float Rflex4 = R_DIV * (VCC / Vflex4 - 1.0);
  // Serial.println("Resistance 4: " + String(Rflex4) + " ohms");
  /*********************************************************************/

  // Read the ADC from LITTLE, and calculate voltage and resistance from it
  int ADCflex5 = analogRead(flex5Pin);
  float Vflex5 = ADCflex5 * VCC / 1023.0;
  float Rflex5 = R_DIV * (VCC / Vflex5 - 1.0);
  // Serial.println("Resistance 5: " + String(Rflex5) + " ohms");

  /*********************************************************************/

  // Use the calculated from resistance (1) to estimate the sensor's bend angle:
  float angle1 = map(Rflex1, flatResistance1, bendResistance1, 0, 180.0);
  // Serial.println("Thumb: " + String(angle1) + " degrees");
  // Serial.println();

  /*********************************************************************/
  // Use the calculated from resistance (1) to estimate the sensor's bend angle:
  float angle2 = map(Rflex2, flatResistance2, bendResistance2, 0, 180.0);
  // Serial.println("Fore: " + String(angle2) + " degrees");
  // Serial.println();

  /*********************************************************************/

  // Use the calculated from resistance (1) to estimate the sensor's bend angle:
  float angle3 = map(Rflex3, flatResistance3, bendResistance3, 0, 180.0);
  // Serial.println("Middle: " + String(angle3) + " degrees");
  // Serial.println();

  /*********************************************************************/

  // Use the calculated from resistance (1) to estimate the sensor's bend angle:
  float angle4 = map(Rflex4, flatResistance4, bendResistance4, 0, 180.0);
  // Serial.println("Ring: " + String(angle4) + " degrees");
  // Serial.println();
  /*********************************************************************/

  // Use the calculated from resistance (1) to estimate the sensor's bend angle:
  float angle5 = map(Rflex5, flatResistance5, bendResistance5, 0, 180.0);
  // Serial.println("Pinky: " + String(angle5) + " degrees");
  // Serial.println();
  /**********************************************************************************************/
  /**********************************************************************************************/
  //  Serial.println();
  /*********************************************************************************************/
  /******************* BATTERY LEVEL **********************************************************/
  counts = analogRead(cellPin);
  float Percentage = (counts / 1023.0) * 100;
  //  Serial.println(String(Percentage) + String(" %")); // Percentage

  ///  mv = counts * mvc;
  ///  Serial.println(String(mv) + String(" mv"));
  /*********************************************************************************************/



  /* Get new sensor events with the readings */
  TCA9548A(0);
  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);

  //  Serial.println("{'Thumb': " + String(angle1) + ", " + "'Fore': " + String(angle2) + ", " + "'Middle': " + String(angle3) + ", " +
  //                 "'Ring': " + String(angle4) + ", "  + "'Pinky': " + String(angle5) + ", " + "'AccX': " + String(a.acceleration.x) + ", " + "'AccY': " + String(a.acceleration.y) + ", "
  //                 "'AccZ': " + String(a.acceleration.z) + "," + "\n" + "'RotationX': " + String(g.gyro.x) + ", " + "'RotationY': " + String(g.gyro.y) + ", " + "'RotationZ': " + String(g.gyro.z) + "}");



  /******************************************************/
  /****** Sending floats through Bluetooth Module ******/
  /*****************************************************/
  /* Array of floats */
  float arr_data[11] = {angle1, angle2, angle3, angle4, angle5, g.gyro.x, g.gyro.y, g.gyro.z, a.acceleration.x, a.acceleration.y, a.acceleration.z};

  if (angle1 >= 50 && angle1 <= 200)
  {
    /* Looping through Array */
    Serial.println(String(arr_data[0]) + "," + String(arr_data[1]) + "," + String(arr_data[2]) +
                   "," + String(arr_data[3]) + "," + String(arr_data[4]) + "," + String(arr_data[5]) + "," + String(arr_data[6]) + "," + String(arr_data[7]) + "," + String(arr_data[8])
                   + "," + String(arr_data[9]) + "," + String(arr_data[10]));
  }


  //  delay(10);

  TCA9548A(1);
  if (Percentage == 100.00)
  {
    static const unsigned char PROGMEM _100_charge []  = {
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80,
      0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0,
      0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0,
      0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0,
      0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    display.clearDisplay();
    display.drawBitmap(35, 1, _100_charge, 64, 32, 1);
    display.display();
  }

  else if (Percentage >= 75.00 && Percentage <= 99.00)
  {
    static const unsigned char PROGMEM _75_charge []  = {
      0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0xe0,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0xe0,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0xe0,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0xfc,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0xf0,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0xe0,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0xe0,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x03, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    display.clearDisplay();
    display.drawBitmap(35, 1, _75_charge, 64, 32, 1);
    display.display();
  }

  else if (Percentage >= 50.00 && Percentage <= 74.00)
  {
    static const unsigned char PROGMEM _50_charge []  = {
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x03, 0xe0,
      0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x01, 0xe0, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x01, 0xe0,
      0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x01, 0xe0, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x01, 0xe0,
      0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x01, 0xe0, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x01, 0xf0,
      0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x01, 0xfe, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x01, 0xff,
      0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x01, 0xff,
      0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x01, 0xff,
      0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x01, 0xff,
      0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x01, 0xfe, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x01, 0xf0,
      0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x01, 0xe0, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x01, 0xe0,
      0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x01, 0xe0, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x01, 0xe0,
      0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x03, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    display.clearDisplay();
    display.drawBitmap(35, 1, _50_charge, 64, 32, 1);
    display.display();
  }
  else if (Percentage >= 25.00 && Percentage <= 49.00)
  {
    static const unsigned char PROGMEM _25_charge []  = {
      0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x03, 0xe0,
      0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x03, 0xe0, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x03, 0xe0,
      0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x03, 0xe0, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x03, 0xe0,
      0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x03, 0xe0, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x03, 0xfc,
      0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x03, 0xfe, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x03, 0xff,
      0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x03, 0xff,
      0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x03, 0xff,
      0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x03, 0xff,
      0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x03, 0xfc, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x03, 0xe0,
      0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x03, 0xe0, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x03, 0xe0,
      0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x03, 0xe0, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x03, 0xe0,
      0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x03, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    display.clearDisplay();
    display.drawBitmap(35, 1, _25_charge, 64, 32, 1);
    display.display();
  }
  else if (Percentage >= 0.00 && Percentage <= 24.00)
  {
    static const unsigned char PROGMEM _0_charge []  = {
      0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0,
      0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0,
      0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0,
      0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0,
      0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc,
      0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
      0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
      0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
      0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
      0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0,
      0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0,
      0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0,
      0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0
    };
    display.clearDisplay();
    display.drawBitmap(35, 1, _0_charge, 64, 32, 1);
    display.display();
  }


  /* New Line */
  //  Serial.println();

  /*********** Sending data with a delay of 1 sec **********************/
  delay(10);
}
